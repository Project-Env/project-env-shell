name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The name of the version which should be released'
        required: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: v${{ github.event.inputs.version }}
          draft: true
  build:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        include:
          - os: ubuntu-latest
            shell_assembly_id: linux-amd64
            shell_assembly_format: tar.gz
          - os: windows-latest
            shell_assembly_id: windows-amd64
            shell_assembly_format: zip
            gu_executable_ext: .cmd
          - os: macos-latest
            shell_assembly_id: macos-amd64
            shell_assembly_format: tar.gz
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.os == 'windows-latest'}}
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - uses: Project-Env/project-env-github-action@v1.0.0
        with:
          cli-version: '3.0.4'
      - run: |
          mvn -B -s etc/m2/settings-ci.xml package -Pnative-image "-Drevision=${{ github.event.inputs.version }}" "-Dshell.assembly.id=${{ matrix.shell_assembly_id }}" "-Dshell.assembly.format=${{ matrix.shell_assembly_format }}"
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/shell-${{ github.event.inputs.version }}-${{ matrix.shell_assembly_id }}.${{ matrix.shell_assembly_format }}
          asset_name: shell-${{ github.event.inputs.version }}-${{ matrix.shell_assembly_id }}.${{ matrix.shell_assembly_format }}
          asset_content_type: application/octet-stream

